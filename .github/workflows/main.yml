name: CI/CD Pipeline

on:
  push:
    branches: [feature/containerized-mysql]
  pull_request:
    branches: [feature/containerized-mysql]

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      DB_HOST: localhost
      DB_USER: ${{ secrets.DB_USER }}
      DB_NAME: ${{ secrets.DB_NAME }}
      MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
     
      
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Set up Docker Compose
      uses: docker/setup-buildx-action@v2

    - name: Start database with Docker Compose
      run: |
        cat > docker-compose.test.yml << 'EOF'
        services:
          mysql:
            image: mysql:8.0
            command: --default-authentication-plugin=mysql_native_password
            environment:
              MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
              MYSQL_DATABASE: ${DB_NAME}
              MYSQL_USER: ${DB_USER}
              MYSQL_PASSWORD: ${DB_PASSWORD}
            ports:
              - 3306:3306
            healthcheck:
              test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
              interval: 5s
              timeout: 5s
              retries: 5
        EOF
        docker compose -f docker-compose.test.yml up -d
        
    - name: Wait for database to be ready
      run: |
        echo "Waiting for MySQL to be ready..."
        timeout=120
        until docker exec $(docker ps -q --filter name=mysql) mysqladmin ping -h localhost --silent || [ $timeout -le 0 ]; do
          sleep 2
          ((timeout--))
        done
        if [ $timeout -le 0 ]; then
          echo "MySQL failed to start in time"
          exit 1
        fi
        echo "MySQL is ready!"
        sleep 10
    
    - name: Initialize database
      env:
        MYSQL_PWD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
      run: |
        if [ -f schema.sql ]; then
          cat schema.sql | docker compose -f docker-compose.test.yml exec -T mysql mysql -uroot -p${MYSQL_ROOT_PASSWORD} ${DB_NAME} 

        else
          echo "Warning: schema.sql not found"
        fi
    
    - name: Run tests
      run: |
        python -m pytest tests/ || echo "No tests found"
      
    - name: Clean up Docker resources
      run: docker compose -f docker-compose.test.yml down
      if: always()

  build:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/feature/containerized-mysql'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io${{ github.repository }}:containerized
        build-args: |
          DB_HOST=db
          DB_USER=${{ secrets.DB_USER }}
          DB_NAME=${{ secrets.DB_NAME }}
         